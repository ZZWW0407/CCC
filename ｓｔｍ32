#include "sys.h"
#include "systick.h"
#include "config.h"

#if DF_SYSTICK
TIMER_SYS		g_sysTime =
{
	0
};


//系统滴答定时器 时间计时变量
#endif

stSYSTEM		g_system =
{
	0
};


//系统参数定义
FG_SYS			g_FGSYS =
{
	0
};


//系统标志位变量定义
STDISPAGE		page_buff[] = //显示的每一页数据值和设置阈值

{

	//第一页

	{
		"P1:\0", "MIN:\0", &g_system.set_temp_min, &g_system.set_temp_min, "C \0"
	},
	//第二页
	{
		"P2:\0", "MAX:\0", &g_system.set_yinliang, &g_system.set_yinliang, "C \0"
	},
	//第三页
	{
		"P3:\0", "MIN:\0", &g_system.set_qumu_num, &g_system.set_qumu_num, "RH%\0"
	},
//	//第四页
//	{
//		"P4:\0", "MAX:\0", &g_system.hum_hight, &g_system.set_hum_max, "RH%\0"
//	},
};


u16 *			set_numb_buff[] = //按键改变参数值定义,配合页面设置的变量定义
{
	&g_system.set_temp_min, 
	&g_system.set_yinliang, 

	&g_system.set_qumu_num,
    &g_time.year,               //页面二参数设置
    &g_time.month,
    &g_time.day,
    &g_time.week,
    &g_time.hour,
    &g_time.min,
    &g_time.sec,

    &g_set_time.p1_start_hour, //页面三参数设置
    &g_set_time.p1_start_min,
	
    &g_set_time.p1_end_hour, //页面三参数设置
    &g_set_time.p1_end_min,  

    &g_set_time.p2_start_hour, //页面三参数设置
    &g_set_time.p2_start_min,
	
    &g_set_time.p2_end_hour, //页面三参数设置
    &g_set_time.p2_end_min, 

    &g_set_time.p3_start_hour, //页面三参数设置
    &g_set_time.p3_start_min,
	
    &g_set_time.p3_end_hour, //页面三参数设置
    &g_set_time.p3_end_min, 
	
	&g_set_time.p4_start_hour, //页面三参数设置
    &g_set_time.p4_start_min,
	
    &g_set_time.p4_end_hour, //页面三参数设置
    &g_set_time.p4_end_min, 
};


//g_time.hour = 999;
//g_time.min = 999;
int naozhongflag;
extern int yemian;
extern u8 page_right;
extern int yuyinflag;
void naozhong()
{
	if(g_time.hour == g_set_time.p1_start_hour && g_time.min == g_set_time.p1_start_min && g_time.sec == 0)　
	{
		if(g_system.set_qumu_num !=1)
		{
			g_system.set_qumu_num = 1;
		}
		else
		{
			g_system.set_qumu_num = 2;
		}
			
		naozhongflag = 1;//
	}
	else if(g_time.hour == g_set_time.p1_end_hour && g_time.min == g_set_time.p1_end_min&& g_time.sec == 0)
	{
		g_system.set_qumu_num = 0;
		naozhongflag = 2;//
	}
	else
	{
		naozhongflag = 0;//8
	}
	if(yuyinflag == 1)
	{
		yemian = 3;
		page_right = 0;
		yuyinflag = 0;
	}
	if(yuyinflag == 2)
	{
		yemian = 3;
		page_right = 2;
		yuyinflag = 0;
	}
	if(yuyinflag == 3)
	{
		yemian = 3;
		page_right = 4;
		yuyinflag = 0;
	}
}

int main(void)
{
	static u8		fresh = 99;
	bsp_Init(); 	//系统时钟初始化
	ds1302_init();
	//app_wifi_init();
	blue_usart_Init(9600);
	musi(9600);
	// =======================================//相关设置参数初始化
    g_system.yinliang = 20;
    g_system.set_yinliang = 20;
	g_system.set_qumu_num = 1;
	music_send_cmd(mu_yin_liang,20);
    delay_ms( 500);
    music_send_cmd(mu_ting_zhi,0);
	while (1)
	{
		
		
			
		
		if(g_system.set_temp_min == 1)
		{
			LED0_B10 = 0;
		}
		//wifi_handle();
		naozhong();
		display_ds1302_handle();        //显示时间以及设置时间参数
        if(( g_FGSYS.display_flag == 1)||( g_FGSYS.display_flag == 3))  //首页显示页面/进行时间段的设置，然后判断时间
        {
            fresh               = 0;
        }
        else if(( g_FGSYS.display_flag == 0)||(g_FGSYS.display_flag == 2))//设置按键进入相关参数设置页面
        {
            display_page(page_buff,g_FGSYS.key_menu);
            fresh               = 0;
        }
		
		timer_handle();                                         //间隔时间进行数据采样
        g_FGSYS.key_menu	= key_scan_deal(3, set_numb_buff);  //按键驱动
		//display_page(page_buff, g_FGSYS.key_menu);	            //设置显示页面参数
      
		 if (g_FGSYS.key_menu == 0) //首页显示页面参数
		{
			if (fresh != g_FGSYS.key_menu)
			{
    			#if DF_OLED
    				OLED_Clear();
                #endif
				fresh				= g_FGSYS.key_menu;
			}
		    //=============================================》首页显示页面----开始　
              
            sprintf(g_system.buf_ds,"              ",g_system.temp_hight,g_system.hum_hight);   //构建数据
            OLED_ShowString(0,4,g_system.buf_ds);      //显示当前的值的字符


		    //=============================================》首页显示页面----结束
            
		}
		else 
		{
			fresh				= 99;
		}
        
        if(g_system.qumu_num != g_system.set_qumu_num)
        {
            g_system.qumu_num = g_system.set_qumu_num;
			if(g_system.qumu_num == 0)
			{
				music_send_cmd(mu_ting_zhi,0);
			}
			else
			{
				music_send_cmd(mu_qu_mu,g_system.qumu_num);
				delay_ms( 500);
				delay_ms( 500);
				delay_ms( 500);
			}
        }
        if(g_system.yinliang != g_system.set_yinliang)
        {
            g_system.yinliang = g_system.set_yinliang;
	        music_send_cmd(mu_yin_liang,g_system.yinliang);
        }
	}
}

extern u16 min;
extern u16 hour;
#if DF_SYSTICK


void timer_handle(void)
{
    static u16 i = 0;
	
    if ((g_system.timer_per_ms - g_Timer.timer_samp1) >= 1000) //每MS更新一次数据
    {
        //===============================================
        g_Timer.timer_samp1 = g_system.timer_per_ms;
    }
	if ((g_system.timer_per_sec - g_sysTime.timer_samp1) >= 2) //每2秒钟更新一次数据
	{
		
		u1_printf("A%d#\r\n",g_system.set_temp_min);
	
		

        //===============================================
		g_sysTime.timer_samp1 = g_system.timer_per_sec;
	}

	if ((g_system.timer_per_sec - g_sysTime.timer_samp2) >= 20) //每1秒钟更新一次数据
	{
        //===============================================
        if(g_system.read_io1 > 0)g_system.read_io1 --;
        if(g_system.read_io2 > 0)g_system.read_io2 --;
        if(g_system.read_io3 > 0)g_system.read_io3 --;
        if(g_system.fall_bobao > 0)g_system.fall_bobao --;
        if(g_system.gsm_send_val > 0)g_system.gsm_send_val --;
        
    	g_sysTime.timer_samp2 = g_system.timer_per_sec;
	}
}


#endif
